module statsem/value

imports

  statsem/expr
  statsem/part
  
  signatures/lex/id-sig
  signatures/value-sig

signature

  relations
    val : Id -> (TYPE * Expr)

rules

  partOk(s, Let(id, e)) :- {T}
    typeOfExpr(s, e) == T,
    declareVal(s, id, T, e).

  typeOfExpr(s, Ref(id)) = T :- {id' e}
    resolveVal(s, id) == [(_, (id', (T, e)))|_] | error $[Value [id] is not defined],
    @id.ref := id'.
    
rules

  declareVal : scope * Id * TYPE * Expr
  declareVal(s, id, T, e) :- 
    !val[id, (T, e)] in s,
    resolveVal(s, id) == [(_, (_, _))] | error $[Duplicate definition of value [id]],
    @id.type := T,
    @id.val := e.
    
  resolveVal : scope * Id -> list((path * (Id * (TYPE * Expr))))
  resolveVal(s, id) = ps :-
    query val
      filter e and { id' :- id' == id }
      min and true
        in s |-> ps.
