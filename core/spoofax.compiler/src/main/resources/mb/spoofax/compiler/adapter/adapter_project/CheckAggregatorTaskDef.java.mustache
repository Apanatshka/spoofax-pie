package {{baseCheckAggregatorTaskDef.packageId}};

import mb.common.message.KeyedMessages;
import mb.common.message.KeyedMessagesBuilder;
import mb.common.message.Messages;
import mb.pie.api.ExecContext;
import mb.pie.api.TaskDef;
import mb.pie.api.stamp.resource.ResourceStampers;
import mb.resource.ResourceKey;
import mb.resource.hierarchical.HierarchicalResource;
import mb.resource.hierarchical.ResourcePath;
import mb.resource.hierarchical.match.ResourceMatcher;
import mb.resource.hierarchical.match.path.PathMatcher;
import mb.resource.hierarchical.walk.ResourceWalker;
import org.checkerframework.checker.nullness.qual.Nullable;

import javax.inject.Inject;
import java.io.IOException;

@{{scope.qualifiedId}}
public class {{baseCheckAggregatorTaskDef.id}} implements TaskDef<ResourcePath, KeyedMessages> {
    private final {{classLoaderResources.classLoaderResources.qualifiedId}} classLoaderResources;
    private final {{checkTaskDef.qualifiedId}} check;

    @Inject public {{baseCheckAggregatorTaskDef.id}}(
        {{classLoaderResources.classLoaderResources.qualifiedId}} classLoaderResources,
        {{checkTaskDef.qualifiedId}} check
    ){
        this.classLoaderResources = classLoaderResources;
        this.check = check;
    }

    @Override public String getId() {
        return "{{baseCheckAggregatorTaskDef.qualifiedId}}";
    }

    @Override public @Nullable KeyedMessages exec(ExecContext context, ResourcePath input) throws IOException {
        context.require(classLoaderResources.tryGetAsLocalResource(getClass()), ResourceStampers.hashFile());
        final KeyedMessagesBuilder messagesBuilder = new KeyedMessagesBuilder();
        final ResourceWalker walker = ResourceWalker.ofPath(PathMatcher.ofNoHidden());
        final HierarchicalResource rootDirectory = context.getHierarchicalResource(input);
        // Require directories recursively, so we re-execute whenever a file is added/removed from a directory.
        rootDirectory.walkForEach(walker, ResourceMatcher.ofDirectory(), context::require);
        final ResourceMatcher matcher = ResourceMatcher.ofFile().and(ResourceMatcher.ofPath(PathMatcher.ofExtensions({{#shared.fileExtensions}}"{{this}}"{{^-last}}, {{/-last}}{{/shared.fileExtensions}})));
        rootDirectory.walkForEach(walker, matcher, file -> {
            final ResourceKey fileKey = file.getKey();
            final KeyedMessages messages = context.require(check, new {{checkTaskDef.qualifiedId}}.Input(fileKey, input));
            messagesBuilder.addMessages(messages);
        });
        return messagesBuilder.build();
    }
}
