package {{baseParseTable.packageId}};

import mb.resource.hierarchical.HierarchicalResource;

import java.io.IOException;
import java.io.InputStream;
import java.io.Serializable;

public class {{baseParseTable.id}} implements Serializable {
    final {{parseTableType.qualifiedId}} parseTable;

    private {{baseParseTable.id}}({{parseTableType.qualifiedId}} parseTable) {
        this.parseTable = parseTable;
    }

    public static {{baseParseTable.id}} fromDefinitionDir(HierarchicalResource definitionDir) {
        final HierarchicalResource resource = definitionDir.appendRelativePath("{{parseTableRelativePath}}");
        try(final InputStream inputStream = resource.openRead()) {
            final {{parseTableType.qualifiedId}} parseTable = {{parseTableType.qualifiedId}}.fromStream(inputStream);
            return new {{baseParseTable.id}}(parseTable);
        } catch({{parseTableExceptionType.qualifiedId}} | IOException e) {
            throw new RuntimeException("Cannot create parse table; cannot read parse table from resource '" + resource + "' in classloader resources");
        }
    }
}
