package {{baseCheckTaskDef.packageId}};

import dagger.Lazy;
import mb.common.message.Messages;
import mb.jsglr.pie.JsglrParseTaskInput;
import mb.pie.api.Function;
import mb.pie.api.SerializableFunction;
import mb.resource.ResourceKey;
import mb.statix.multilang.metadata.LanguageId;
import mb.statix.multilang.metadata.LanguageMetadataManager;
import mb.statix.multilang.pie.SmlCheckTaskDef;
import mb.statix.multilang.pie.SmlSolveProject;
import mb.statix.multilang.pie.config.SmlBuildContextConfiguration;
import org.checkerframework.checker.nullness.qual.Nullable;

import javax.inject.Inject;

@{{adapterProject.scope.qualifiedId}}
public class {{baseCheckTaskDef.id}} extends SmlCheckTaskDef {

    @Inject public {{baseCheckTaskDef.id}}(
        Function<JsglrParseTaskInput, Messages> messagesSupplier,
        SmlBuildContextConfiguration buildContextConfiguration,
        SmlSolveProject solveProject,
        Lazy<LanguageMetadataManager> languageMetadataManager
    ) {
        super(messagesSupplier.mapInput(new SerializableFunction<ResourceKey, JsglrParseTaskInput>() {
            @Override public JsglrParseTaskInput apply(ResourceKey file) {
                return JsglrParseTaskInput.builder().withFile(file).build();
            }

            @Override public boolean equals(@Nullable Object other) {
                return this == other || other != null && this.getClass() == other.getClass();
            }

            @Override public int hashCode() { return 0; }

            @Override public String toString() { return getClass().getSimpleName(); }
        }), buildContextConfiguration, solveProject, languageMetadataManager);
    }

    @Override public String getId() {
        return "{{baseCheckTaskDef.qualifiedId}}";
    }

    @Override protected LanguageId getLanguageId() {
        return new LanguageId("{{languageId}}");
    }
}
