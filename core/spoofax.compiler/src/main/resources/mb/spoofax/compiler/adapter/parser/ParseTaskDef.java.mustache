package {{baseParseTaskDef.packageId}};

import mb.common.result.Result;
import mb.jsglr1.common.JSGLR1ParseException;
import mb.jsglr1.common.JSGLR1ParseOutput;
import mb.jsglr1.pie.JSGLR1ParseTaskDef;
import mb.pie.api.ExecContext;

import javax.inject.Inject;
import javax.inject.Provider;

@{{adapterProject.scope.qualifiedId}}
public class {{baseParseTaskDef.id}} extends JSGLR1ParseTaskDef {
    private final {{classloaderResourcesInput.classloaderResources.qualifiedId}} classloaderResources;
    private final Provider<{{languageProjectInput.parser.qualifiedId}}> parserProvider;

    @Inject
    public {{baseParseTaskDef.id}}(
        {{classloaderResourcesInput.classloaderResources.qualifiedId}} classloaderResources,
        Provider<{{languageProjectInput.parser.qualifiedId}}> parserProvider
    ) {
        this.classloaderResources = classloaderResources;
        this.parserProvider = parserProvider;
    }

    @Override public String getId() {
        return "{{baseParseTaskDef.qualifiedId}}";
    }

    @Override protected Result<JSGLR1ParseOutput, JSGLR1ParseException> parse(ExecContext context, String text) throws Exception {
        context.require(classloaderResources.definitionDirectory.appendRelativePath("{{languageProjectInput.parseTableRelativePath}}"));
        context.require(classloaderResources.getResource({{baseParseTaskDef.id}}.class));
        context.require(classloaderResources.getResource({{languageProjectInput.parser.qualifiedId}}.class));
        context.require(classloaderResources.getResource({{languageProjectInput.parserFactory.qualifiedId}}.class));
        context.require(classloaderResources.getResource({{languageProjectInput.parseTable.qualifiedId}}.class));
        final {{languageProjectInput.parser.qualifiedId}} parser = parserProvider.get();
        try {
            return Result.ofOk(parser.parse(text, "{{languageProjectInput.startSymbol}}"));
        } catch(JSGLR1ParseException e) {
            return Result.ofErr(e);
        }
    }
}
