package {{baseTokenizeTaskDef.packageId}};

import mb.common.option.Option;
import mb.jsglr.common.JSGLRTokens;
import mb.pie.api.ExecContext;
import mb.pie.api.TaskDef;
import mb.resource.ResourceKey;
import org.checkerframework.checker.nullness.qual.Nullable;

import javax.inject.Inject;
import java.io.IOException;

@{{adapterProject.scope.qualifiedId}}
public class {{baseTokenizeTaskDef.id}} implements TaskDef<ResourceKey, Option<JSGLRTokens>> {
    private final {{classloaderResourcesInput.classloaderResources.qualifiedId}} classloaderResources;
    private final {{parseTaskDef.qualifiedId}} parse;

    @Inject public {{baseTokenizeTaskDef.id}}(
        {{classloaderResourcesInput.classloaderResources.qualifiedId}} classloaderResources,
        {{parseTaskDef.qualifiedId}} parse
    ) {
        this.classloaderResources = classloaderResources;
        this.parse = parse;
    }

    @Override public String getId() {
        return "{{baseTokenizeTaskDef.qualifiedId}}";
    }

    @Override
    public @Nullable Option<JSGLRTokens> exec(ExecContext context, ResourceKey key) throws IOException {
        context.require(classloaderResources.tryGetAsLocalResource({{baseTokenizeTaskDef.id}}.class));
        return context.require(parse.createTokensSupplier(key)).ok();
    }
}
