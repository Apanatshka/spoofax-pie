package {{baseClassloaderResources.packageId}};

import mb.resource.ReadableResource;
import mb.resource.classloader.ClassLoaderResource;
import mb.resource.classloader.ClassLoaderResourceRegistry;
import mb.resource.hierarchical.SegmentsPath;

public class {{baseClassloaderResources.id}} {
    public final ClassLoaderResourceRegistry resourceRegistry = new ClassLoaderResourceRegistry("{{qualifier}}", {{baseClassloaderResources.id}}.class.getClassLoader());

    public ClassLoaderResource getResource(String path) {
        return resourceRegistry.getResource(path);
    }

    public ClassLoaderResource getResource(Class<?> clazz) {
        return resourceRegistry.getResource(clazz);
    }

    public ClassLoaderResource getResource(SegmentsPath path) {
        return resourceRegistry.getResource(path);
    }

    public ReadableResource tryGetAsLocalResource(String path) {
        return getResource(path).tryAsLocalResource();
    }

    public ReadableResource tryGetAsLocalResource(Class<?> clazz) {
        return getResource(clazz).tryAsLocalResource();
    }

    public ReadableResource tryGetAsLocalResource(SegmentsPath path) {
        return getResource(path).tryAsLocalResource();
    }


    public final ClassLoaderResource definitionDirectory = resourceRegistry.getResource("{{languageProject.packagePath}}");

    public ClassLoaderResource getDefinitionResource(String path) {
        return definitionDirectory.appendAsRelativePath(path);
    }

    public ReadableResource tryGetAsLocalDefinitionResource(String path) {
        return getDefinitionResource(path).tryAsLocalResource();
    }
}
