module rv32im/start

imports
  
  rv32im/lex

context-free start-symbols
  
  Start
  
context-free sorts

  Start
  Line
  Label
  Statement
  Pseudodirective
  Instruction
  IntOrID

context-free syntax
  
  Start.Program = <<{Line "\n"}*>>
  
  Line = Statement
  Line = Label
  
  Label.Label = <<ID>:>
  
  IntOrID = INT
  IntOrID = ID
  
  Statement = Pseudodirective
  Statement = Instruction
  
  // Venus Pseudo instructions
  
  Pseudodirective.PSData = <
  
  .data>
  Pseudodirective.PSText = <
  
  .text>
  Pseudodirective.PSByte = <.byte <{INT ", "}*>>
  Pseudodirective.PSString = <.string <STRING>>
  Pseudodirective.PSAsciiz = <.asciiz <STRING>>
  Pseudodirective.PSWord = <.word <{IntOrID ", "}*>>
  Pseudodirective.PSSpace = <.space <INT>>
  Pseudodirective.PSGlobl = <
  
  .globl <ID>
  >
  Pseudodirective.PSAlign = <.align <INT>>
  Pseudodirective.PSEquiv = <.equiv <IntOrID>, <IntOrID>>
  Pseudodirective.PSEqu = <.equ <IntOrID>, <IntOrID>>
  Pseudodirective.PSSet = <.set <IntOrID>, <IntOrID>>
  
  // RV32I - Base
  // Math
  Instruction.Add = <add <ID>, <ID>, <ID>> {case-insensitive}
  Instruction.Addi = <addi <ID>, <ID>, <IntOrID>> {case-insensitive}
  Instruction.And = <and <ID>, <ID>, <ID>> {case-insensitive}
  Instruction.Andi = <andi <ID>, <ID>, <IntOrID>> {case-insensitive}
  Instruction.Or = <or <ID>, <ID>, <ID>> {case-insensitive}
  Instruction.Ori = <ori <ID>, <ID>, <IntOrID>> {case-insensitive}
  Instruction.Xor = <xor <ID>, <ID>, <ID>> {case-insensitive}
  Instruction.Xori = <xori <ID>, <ID>, <IntOrID>> {case-insensitive}
  Instruction.Sub = <sub <ID>, <ID>, <ID>> {case-insensitive}
  
  // Branches
  Instruction.Beq = <beq <ID>, <ID>, <IntOrID>> {case-insensitive}
  Instruction.Bne = <bne <ID>, <ID>, <IntOrID>> {case-insensitive}
  Instruction.Blt = <blt <ID>, <ID>, <IntOrID>> {case-insensitive}
  Instruction.Bge = <bge <ID>, <ID>, <IntOrID>> {case-insensitive}
  Instruction.Bltu = <bltu <ID>, <ID>, <IntOrID>> {case-insensitive}
  Instruction.Bgeu = <bgeu <ID>, <ID>, <IntOrID>> {case-insensitive}
  
  // Misc.
  Instruction.Ecall = <ecall>
  Instruction.Lui = <lui <ID>, <IntOrID>> {case-insensitive}
  Instruction.Auipc = <auipc <ID>, <IntOrID>> {case-insensitive}
  
  // Jumps
  Instruction.Jal2 = <jal <ID>, <IntOrID>> {case-insensitive}
  Instruction.Jalr3 = <jalr <ID>, <ID>, <IntOrID>> {case-insensitive}
  
  // Loading
  Instruction.Lb = <lb <ID>, <IntOrID>(<ID>)> {case-insensitive}
  Instruction.Lw3 = <lw <ID>, <IntOrID>(<ID>)> {case-insensitive}
  Instruction.Lw2 = <lw <ID>, <IntOrID>> {case-insensitive}
  Instruction.Lh = <lh <ID>, <IntOrID>(<ID>)> {case-insensitive}
  Instruction.Lbu = <lbu <ID>, <IntOrID>(<ID>)> {case-insensitive}
  Instruction.Lhu = <lhu <ID>, <IntOrID>(<ID>)> {case-insensitive}
  
  // Storing
  Instruction.Sb = <sb <ID>, <IntOrID>(<ID>)> {case-insensitive}
  Instruction.Sh = <sh <ID>, <IntOrID>(<ID>)> {case-insensitive}
  Instruction.Sw = <sw <ID>, <IntOrID>(<ID>)> {case-insensitive}
  Instruction.Sw2 = <sw <ID>, <IntOrID>, <ID>> {case-insensitive} 
  
  // Set less than
  Instruction.Slt = <slt <ID>, <ID>, <ID>> {case-insensitive}
  Instruction.Sltu = <sltu <ID>, <ID>, <ID>> {case-insensitive}
  Instruction.Slti = <slti <ID>, <ID>, <IntOrID>> {case-insensitive}
  Instruction.Sltiu = <sltiu <ID>, <ID>, <IntOrID>> {case-insensitive}
  
  // Shifts
  Instruction.Sll = <sll <ID>, <ID>, <ID>> {case-insensitive}
  Instruction.Srl = <srl <ID>, <ID>, <ID>> {case-insensitive}
  Instruction.Sra = <sra <ID>, <ID>, <ID>> {case-insensitive}
  Instruction.Slli = <slli <ID>, <ID>, <IntOrID>> {case-insensitive}
  Instruction.Srli = <srli <ID>, <ID>, <IntOrID>> {case-insensitive}
  Instruction.Srai = <srai <ID>, <ID>, <IntOrID>> {case-insensitive}
  
  // RV32IM - Extension
  // Math
  Instruction.Mul = <mul <ID>, <ID>, <ID>> {case-insensitive}
  Instruction.Mulh = <mulh <ID>, <ID>, <ID>> {case-insensitive}
  Instruction.Mulhsu = <mulhsu <ID>, <ID>, <ID>> {case-insensitive}
  Instruction.Mulhu = <mulhu <ID>, <ID>, <ID>> {case-insensitive}
  Instruction.Rem = <rem <ID>, <ID>, <ID>> {case-insensitive}
  Instruction.Remu = <rmeu <ID>, <ID>, <ID>> {case-insensitive}
  Instruction.Div = <div <ID>, <ID>, <ID>> {case-insensitive}
  Instruction.Divu = <divu <ID>, <ID>, <ID>> {case-insensitive}
  
  // Venus Sugar
  Instruction.Beqz = <beqz <ID>, <ID>> {case-insensitive}
  Instruction.Bgez = <bgez <ID>, <ID>> {case-insensitive}
  Instruction.Bgtz = <bgtz <ID>, <ID>> {case-insensitive}
  Instruction.Bltz = <bltz <ID>, <ID>> {case-insensitive}
  Instruction.Bnez = <bnez <ID>, <ID>> {case-insensitive}
  Instruction.Bgt = <bgt <ID>, <ID>, <IntOrID>> {case-insensitive}
  Instruction.Bgtu = <bgtu <ID>, <ID>, <IntOrID>> {case-insensitive}
  Instruction.Ble = <ble <ID>, <ID>, <IntOrID>> {case-insensitive}
  Instruction.Bleu = <bleu <ID>, <ID>, <IntOrID>> {case-insensitive}
  Instruction.Blez = <blez <ID>, <ID>, <IntOrID>> {case-insensitive}
  
  Instruction.Call = <call <ID>> {case-insensitive}
  Instruction.J = <j <ID>> {case-insensitive}
  Instruction.Jal1 = <jal <ID>> {case-insensitive}
  Instruction.Jalr1 = <jalr <ID>> {case-insensitive}
  Instruction.Jr = <jr <ID>> {case-insensitive}
  Instruction.Ret = <ret> {case-insensitive}
  
  Instruction.La = <la <ID>, <ID>> {case-insensitive}
  Instruction.Li = <li <ID>, <IntOrID>> {case-insensitive}
  
  Instruction.Mv = <mv <ID>, <ID>> {case-insensitive}
  Instruction.Neg = <neg <ID>, <ID>> {case-insensitive}
  Instruction.Not = <not <ID>, <ID>> {case-insensitive}
  Instruction.Nop = <nop> {case-insensitive}
  Instruction.Tail = <tail <ID>> {case-insensitive}
  
  Instruction.Seqz = <seqz <ID>, <ID>> {case-insensitive}
  Instruction.Sgtz = <sgtz <ID>, <ID>> {case-insensitive}
  Instruction.Sltz = <sltz <ID>, <ID>> {case-insensitive}
  Instruction.Snez = <snez <ID>, <ID>> {case-insensitive}
  
  //  Instruction.Seq = 'seq' ID "," ID "," ID
  //  Instruction.Sge = 'sge' ID "," ID "," ID
  //  Instruction.Sgt = 'sgt' ID "," ID "," ID
  //  Instruction.Sle = 'sle' ID "," ID "," ID
  //  Instruction.Sne = 'sne' ID "," ID "," ID  
  //  Instruction.Load = 
  //  Instruction.Store = 
